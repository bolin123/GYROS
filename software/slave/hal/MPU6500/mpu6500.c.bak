#include "mpu6500.h"
#include "sys.h"
#include "delay.h"
#include "usart.h"   
#include "spi.h"
#include "led.h"


//////////////////////////////////////////////////////////////////////////////////	 
//本程序只供学习使用，未经作者许可，不得用于其它任何用途
//ALIENTEK战舰STM32开发板V3
//MPU6500 驱动代码	   
//正点原子@ALIENTEK
//技术论坛:www.openedv.com
//创建日期:2015/1/17
//版本：V1.0
//版权所有，盗版必究。
//Copyright(C) 广州市星翼电子科技有限公司 2009-2019
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 
 
//初始化MPU6500
//返回值:0,成功
//    其他,错误代码
u8 MPU_Init(void)
{ 
	u8 res;
	
	RCC->APB2ENR|=1<<4;     //使能PORTC时钟 
	GPIOC->CRL&=0XFF000FFF;	//PC3,PC4,PC5设置成推挽输出 for MPU_FSYNC4,MPU_FSYNC3,MPU_FSYNC2	  
	GPIOC->CRL|=0X00333000; 	
	MPU_FSYNC4_CTRL=0;//Frame synchronization digital input. Connect to GND if unused
	MPU_FSYNC3_CTRL=0;//Frame synchronization digital input. Connect to GND if unused
	MPU_FSYNC2_CTRL=0;//Frame synchronization digital input. Connect to GND if unused
	
	RCC->APB2ENR|=1<<3;     //使能PORTB时钟 
	GPIOB->CRL&=0XFFFFF0FF;	//PB2设置成推挽输出	  
	GPIOB->CRL|=0X00000300; 
	MPU_FSYNC1_CTRL=0;//Frame synchronization digital input. Connect to GND if unused
	
	RCC->APB2ENR|=1<<2;     //使能PORTA时钟		
	GPIOA->CRL&=0XFFFF0F0F;	//PA1,PA3设置成输入  MPU_INT4,MPU_INT3,
	GPIOA->CRL|=0X00008080; 
    GPIOA->ODR|=5<<1;       //PA1,PA3 上拉 
	
	RCC->APB2ENR|=1<<3;     //使能PORTB时钟
	GPIOB->CRL&=0XFFFFFFF0;	//PB0设置成输入	  MPU_INT2,
	GPIOB->CRL|=0X00000008; 				   
	GPIOB->ODR|=1<<0;	   	//PB0 上拉
	GPIOB->CRH&=0XFFFFF0FF;	//PB10设置成输入	  MPU_INT1,
	GPIOB->CRH|=0X00000800; 				   
	GPIOB->ODR|=1<<10;	   	//PB10 上拉


	RCC->APB2ENR|=1<<2;     //使能PORTA时钟 
	GPIOA->CRL&=0XFFFFF0FF;	//PA2设置成推挽输出	  
	GPIOA->CRL|=0X00000300; 
	MPU_CS4=1;//控制MPU_CS4电平

    RCC->APB2ENR|=1<<2;     //使能PORTA时钟 
	GPIOA->CRL&=0XFFF0FFFF;	//PA4设置成推挽输出	  
	GPIOA->CRL|=0X00030000; 
	MPU_CS3=1;//控制MPU_CS3电平

	RCC->APB2ENR|=1<<3;     //使能PORTB时钟 
	GPIOB->CRL&=0XFFFFFF0F;	//PB1设置成推挽输出	  
	GPIOB->CRL|=0X00000030; 
	MPU_CS2=1;//控制MPU_CS2电平

    RCC->APB2ENR|=1<<3;     //使能PORTB时钟 
	GPIOB->CRH&=0XFFFF0FFF;	//PB11设置成推挽输出	  
	GPIOB->CRH|=0X00003000; 
	MPU_CS1=1;//控制MPU_CS1电平

	
    SPI1_Init();//初始化SPI1总线
	 
	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);	//复位MPU6500
    delay_ms(100);
	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//唤醒MPU6500 
	MPU_Set_Gyro_Fsr(3);					//陀螺仪传感器,±2000dps
	MPU_Set_Accel_Fsr(0);					//加速度传感器,±2g
	MPU_Set_Rate(SAMPLING_RATE);						//设置采样率50Hz
	MPU_Write_Byte(MPU_INT_EN_REG,0X01);	//关闭所有中断//mdli +  BIT_DATA_RDY_EN
	MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C主模式关闭
	MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//关闭FIFO
	MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT引脚低电平有效
	
	SPI1_SetSpeed(SPI_SPEED_2);//设置到高速模式	 
	res=MPU_Read_Byte(MPU_DEVICE_ID_REG);
	if(res==MPU_ADDR)//器件ID正确
	{
		MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);	//设置CLKSEL,PLL X轴为参考
		MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);	//加速度与陀螺仪都工作
		MPU_Set_Rate(SAMPLING_RATE);						//设置采样率为50Hz
 	}else return 1;
	return 0;
}
//设置MPU6500陀螺仪传感器满量程范围
//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功
//    其他,设置失败 
u8 MPU_Set_Gyro_Fsr(u8 fsr)
{
	return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);//设置陀螺仪满量程范围  
}
//设置MPU6500加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败 
u8 MPU_Set_Accel_Fsr(u8 fsr)
{
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);//设置加速度传感器满量程范围  
}
//设置MPU6500的数字低通滤波器
//lpf:数字低通滤波频率(Hz)
//返回值:0,设置成功
//    其他,设置失败 
u8 MPU_Set_LPF(u16 lpf)
{
	u8 data=0;
	if(lpf>=188)data=1;
	else if(lpf>=98)data=2;
	else if(lpf>=42)data=3;
	else if(lpf>=20)data=4;
	else if(lpf>=10)data=5;
	else data=6; 
	return MPU_Write_Byte(MPU_CFG_REG,data);//设置数字低通滤波器  
}
//设置MPU6500的采样率(假定Fs=1KHz)
//rate:4~1000(Hz)
//返回值:0,设置成功
//    其他,设置失败 
u8 MPU_Set_Rate(u16 rate)
{
	u8 data;
	if(rate>1000)rate=1000;
	if(rate<4)rate=4;
	data=1000/rate-1;
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//设置数字低通滤波器
 	return MPU_Set_LPF(rate/2);	//自动设置LPF为采样率的一半
}

//得到温度值
//返回值:温度值(扩大了100倍)
short MPU_Get_Temperature(void)
{
    u8 buf[2]; 
    short raw;
	float temp;
	MPU_Read_Len(MPU_ADDR,MPU_TEMP_OUTH_REG,2,buf); 
    raw=((u16)buf[0]<<8)|buf[1];  
    temp=36.53+((double)raw)/340;  
    return temp*100;;
}
//得到陀螺仪值(原始值)
//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
u8 MPU_Get_Gyroscope(short *gx,short *gy,short *gz)
{
    u8 buf[6],res;  
	res=MPU_Read_Len(MPU_ADDR,MPU_GYRO_XOUTH_REG,6,buf);
	if(res==0)
	{
		*gx=((u16)buf[0]<<8)|buf[1];  
		*gy=((u16)buf[2]<<8)|buf[3];  
		*gz=((u16)buf[4]<<8)|buf[5];
	} 	
    return res;;
}
//得到加速度值(原始值)
//ax,ay,az:加速度x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
u8 MPU_Get_Accelerometer(short *ax,short *ay,short *az)
{
    u8 buf[6],res;  
	res=MPU_Read_Len(MPU_ADDR,MPU_ACCEL_XOUTH_REG,6,buf);
	if(res==0)
	{
		*ax=((u16)buf[0]<<8)|buf[1];  
		*ay=((u16)buf[2]<<8)|buf[3];  
		*az=((u16)buf[4]<<8)|buf[5];
	} 	
    return res;;
}
//得到加速度值(原始值)+陀螺仪值(原始值)
//ax,ay,az:加速度x,y,z轴的原始读数(带符号)+gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
u8 MPU_Get_AllDatas(short *ax,short *ay,short *az,short *gx,short *gy,short *gz)
{
    u8 buf[14],res;  
	res=MPU_Read_Len(MPU_ADDR,MPU_ACCEL_XOUTH_REG,14,buf);
	if(res==0)
	{
		*ax=((u16)buf[0]<<8)|buf[1];  //ax  
		*ay=((u16)buf[2]<<8)|buf[3];  //ay  
		*az=((u16)buf[4]<<8)|buf[5];  //az
		*gx=((u16)buf[8]<<8)|buf[9];  //gx 
		*gy=((u16)buf[10]<<8)|buf[11];//gy  
		*gz=((u16)buf[12]<<8)|buf[13];//gz
	} 	
    return res;;
}
//IIC连续写
//addr:器件地址 
//reg:寄存器地址
//len:写入长度
//buf:数据区
//返回值:0,正常
//    其他,错误代码
u8 MPU_Write_Len(u8 addr,u8 reg,u8 len,u8 *buf)
{
	u8 i; 	
	MPU_CS1 = 0;
    SPI1_ReadWriteByte(reg);	//写寄存器地址    	
	for(i=0;i<len;i++)
		SPI1_ReadWriteByte(buf[i]);	//发送数据
	MPU_CS1 = 1;    
	return 0;
} 
//IIC连续读
//addr:器件地址
//reg:要读取的寄存器地址
//len:要读取的长度
//buf:读取到的数据存储区
//返回值:0,正常
//    其他,错误代码
u8 MPU_Read_Len(u8 addr,u8 reg,u8 len,u8 *buf)
{ 
	MPU_CS1 = 0;
    SPI1_ReadWriteByte(reg|0x80);//写寄存器地址+读模式    	
	while(len--)		
	{*buf=SPI1_ReadWriteByte(0xff);//读取数据
	buf++;}
	MPU_CS1 = 1;    
	return 0;	
}
//SPI写一个字节 
//reg:寄存器地址
//data:数据
//返回值:0,正常
//    其他,错误代码
u8 MPU_Write_Byte(u8 reg,u8 data) 				 
{
	MPU_CS1 = 0;
    SPI1_ReadWriteByte(reg);	//写寄存器地址    
	SPI1_ReadWriteByte(data);//发送数据
	MPU_CS1 = 1;    
	return 0;
}
//SPI读一个字节 
//reg:寄存器地址 
//返回值:读到的数据
u8 MPU_Read_Byte(u8 reg)
{
	u8 res;
	MPU_CS1 = 0;
    SPI1_ReadWriteByte(reg|0x80);//写寄存器地址+读模式    
	res=SPI1_ReadWriteByte(0xff);//读取数据
	MPU_CS1 = 1;    
	return res;		
}

//读取 MPU interrupt status registers.
//Auto clear status  Mask of interrupt bits at same time.
//返回值:读到的数据
u8 MPU_Get_INT_Status(void)
{
    u8 res;	
	MPU_Read_Len(MPU_ADDR,MPU_INT_STA_REG,1,&res);         
    return res;
}

